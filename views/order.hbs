<section id="order">
  <div class="order-wrapper">
    <div class="order-header">
      <h1>
        <div>
          <div id="back-to-orders-wrapper">
            <span id="back-to-orders" onclick="javascript:history.back()">
                <span id="back-text">
                  <i class="fas fa-arrow-left" id="back-arrow"></i>BACK
                </span >
            </span>
          </div>
          <i class="icon-SnackVan"></i>
        </div>
        Order Details
      </h1>
      <h3>
        Status: {{order.status}}
        {{#if (eq order.status 'completed')}}
        <i class="fas fa-circle" id="blue-dot"></i>
        <div class="rating_page">
          <a href="/customer/rating/{{order.orderId}}"><u>Write a Review!</u></a>
        </div>
        {{else if (eq order.status 'fulfilled')}}
        <i class="fas fa-circle" id="green-dot"></i>
        {{else if (eq order.status 'preparing')}}
        <i class="fas fa-circle" id="orange-dot"></i>
        {{/if}}
      </h3>
    </div>
    <div>
      {{#if (or (eq order.status 'preparing') (eq order.discountApplied true))}}
      <div class="progress-bars">
        <div class="order-timer">
          <span id="order-locked-in"></span><br>
          <span id="mins_change"></span>
          <span id="secs_change"></span>
          <meter id="order-fixed-cd" min="0" max="100" low="30" high="70" optimum="85" value="0"></meter>
        </div>
        <div class="discount-timer">
          <span id="discount-in"></span><br>
          <span id="mins"></span>
          <span id="secs"></span>
          <meter id="discount-cd" min="0" max="100" low="30" high="70" optimum="85" value="0"></meter>
        </div>
      </div>
      {{/if}}
      <div>
        <i id="van-name" class="fas fa-shuttle-van"></i>
        <span class="cart-van-name">{{vendor.vendorName}}</span>
      </div>
      <div>
        <i id="van-location" class="fas fa-map-marker-alt"></i>
        <span class="cart-van-location">{{vendor.address}}</span>
      </div>
    </div>
    {{> cart-table order=null }}
    {{#if (eq order.status 'preparing')}}
    <div id="order-buttons" class="order-buttons">
      <button id="cancel-order-button" class="button" onclick="cancelOrder('{{order.orderId}}')">
        <i class="fas fa-trash-alt"></i>
        Cancel Order
      </button>
      <button id="update-order-button" class="button" onclick="updateOrder('{{order.orderId}}')">
        <i class="fas fa-edit"></i>
        Update Order
      </button>
      <button id="add-item-button" class="button" onclick="goToMenu('{{order.orderId}}')" type="button">
        <i class="fas fa-clipboard=list"></i> Add items from menu
      </button>
    </div>
    {{/if}}
  </div>
</section>

<script>
  const order = {{{ json order }}}
  const DISCOUNT_TIME_LIMIT_MIN = parseFloat({{{discountSettings.discountTimeLimitMin}}})
  const ORDER_LOCK_IN_TIME_LIMIT_MIN = parseFloat({{{discountSettings.orderLockInTimeLimitMin}}})
  const DISCOUNT_RATE = parseFloat({{{discountSettings.discountRate}}})
 
  // reload, but only once, avoids infinite loop
  async function reloadOnce() {
    if (window.localStorage){
      if (!localStorage.getItem('firstReload')){
        localStorage['firstReload'] = true;
        window.location.reload();
      } else {
        localStorage.removeItem('firstReload');
      }
    }
  };

  function loadCart() {
    const cart = JSON.parse(sessionStorage.getItem('cart'));
    // if there is a local cart then cart table will load from that, otherwise,
    // load it from order instead.
    if (!(cart && String(document.referrer).indexOf("menu") !== -1)) {
      sessionStorage.setItem("cart", JSON.stringify({{{ json (orderToCart order)}}}));
      reloadOnce();
    }
  }
  loadCart();

  // redirect to menu to add items to this current order
  function goToMenu(orderId) {
    window.location = `/customer/menu?orderId=${orderId}`;
  }

  const vendor = JSON.parse(sessionStorage.getItem('vendor'));
  if (vendor) {
    document.querySelector('.cart-van-name').textContent = vendor.vendorName;
    document.querySelector('.cart-van-location').textContent = vendor.address;
  }

  // update the table view based on the current cart items, and modifies the
  // order in the database
  async function updateOrder(orderId) {
    const cart = JSON.parse(sessionStorage.getItem("cart"));
    const order = {{{ json order }}}
    order.timeOrdered = new Date();
    order.items = cart;
    fetch(`/customer/orders/${orderId}`, {
      method: "PUT",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(order)
    }).then(() => window.location.reload());
  }

  // sets the status of the order in the database as "cancelled", they will
  // not be displayed on the orders page
  async function cancelOrder(orderId) {
    const order = {{{ json order }}}
    order.items = {{{ json (orderToCart order) }}};
    order.status = "cancelled";
    fetch(`/customer/orders/${orderId}`, {
      method: "PUT",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(order)
    }).then(() => window.location.href = `/customer/orders`);
  }

  // show the trash button to allow customer to cancel the order
  function renderTrashButtons(order) {
    if (order.status === "preparing") {
      const trashButtons = document.getElementsByClassName("trash-button");
      for (let i=0; i<trashButtons.length; i++) {
        trashButtons[i].style.display = "inline-block";
        trashButtons[i].style.visibility = "visible";
        trashButtons[i].addEventListener("click", render);
      }
    }
  }
 
  // allow customer to edit the order
  function renderOrderEditButtons(order){
    if (order.status === "preparing") {
      const buttonsWrapper = document.getElementById("order-buttons");
      buttonsWrapper.style.display = "block";
      buttonsWrapper.style.visibility = "visible";
      for (let ele of buttonsWrapper.childNodes) {
        ele.addEventListener("click", render);
      }
    }
  }

    // allow customer to edit the order
  function enableCountInput(order) {
    if (order.status === "preparing") {
      const countInputs = document.getElementsByClassName("count-input");
      for (let i=0; i<countInputs.length; i++) {
        countInputs[i].disabled = false;
        countInputs[i].addEventListener("change", render);
      }
    }
  }

  //while the order time is not locked, customer can change or cancel their order
  function render() {
    var now = new Date().getTime();
    
    var timeleft_change = reorder_timer - now;
    if (timeleft_change > 0){
      renderTrashButtons(order);
      renderOrderEditButtons(order);
      enableCountInput(order);
    }
  }
  render();

  //disable the edit and cancel button 
  function disableOrderEdit(){
    const trashButtons = document.getElementsByClassName("trash-button");
    const buttonsWrapper = document.getElementById("order-buttons");
    const countInputs = document.getElementsByClassName("count-input");

    if (trashButtons != null) {
      for (let i=0; i<trashButtons.length; i++) {
        trashButtons[i].style.display = "none";
        trashButtons[i].style.visibility = "hidden";
      }
    }
    if (buttonsWrapper != null) {
      buttonsWrapper.style.display = "none";
      buttonsWrapper.style.visibility = "hidden";
    }
    if (countInputs != null) {
      for (let i=0; i<countInputs.length; i++) {
        countInputs[i].disabled = true;
      }
    }
  }

  function addMinutes(date, minutes) {
    var discount_time = (date + minutes * 60000);
    return discount_time;
  }

  // Progress bar for the timer
  var discount_pb = document.getElementById("discount-cd");
  var order_fixed_pb = document.getElementById("order-fixed-cd");
  var discount_timer = 0;
  var reorder_timer = 0;
  var initial_discount_timer = 0;
  var time_order = new Date(order.timeOrdered).getTime();

  if (discount_timer == 0) {
    discount_timer = addMinutes(new Date(order.timeOrdered).getTime(),DISCOUNT_TIME_LIMIT_MIN);
  }
  if (reorder_timer == 0){
    reorder_timer = addMinutes(new Date(order.timeOrdered).getTime(),ORDER_LOCK_IN_TIME_LIMIT_MIN);
  }

  if (initial_discount_timer == 0){
    initial_discount_timer = discount_timer;
  }
  
  var buttonsUpdated = false;
  
  /* Refresh page every 5 minutes */
  setInterval(() => {
    window.location.reload()
  }, 300000);

  // Run myfunc every second
  var myfunc = setInterval(function () {

    var now = new Date().getTime();
    var timeleft = discount_timer - now;
    var timeleft_change = reorder_timer - now;
    const discountTimeSet = DISCOUNT_TIME_LIMIT_MIN;
    const changeOrderTimeSet = ORDER_LOCK_IN_TIME_LIMIT_MIN;

    if (!buttonsUpdated && timeleft_change > 0) {
      // Render the buttons
      renderTrashButtons(order);
      renderOrderEditButtons(order);
      enableCountInput(order);
      buttonsUpdated = !buttonsUpdated;
    }
    
    if (!order_fixed_pb || !discount_pb) {
      return;
    }
    
    // Update progress bar
    order_fixed_pb.setAttribute("value", 100 - 100*(1- timeleft_change/(changeOrderTimeSet*60000)));
    discount_pb.setAttribute("value", 100 - 100*(1- timeleft/(discountTimeSet*60000)));

    // Calculating the days, hours, minutes and seconds left
    var minutes = Math.floor((timeleft % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((timeleft % (1000 * 60)) / 1000);

    var minutes_change = Math.floor((timeleft_change % (1000 * 60 * 60)) / (1000 * 60));
    var seconds_change = Math.floor((timeleft_change % (1000 * 60)) / 1000);

    // Result is output to the specific element
    document.getElementById("order-locked-in").innerHTML = "Order locked in: ";
    document.getElementById("mins_change").innerHTML = minutes_change >= 10 ? minutes_change + "m " : "0" + minutes_change + "m ";
    document.getElementById("secs_change").innerHTML = seconds_change >= 10 ? seconds_change + "s " : "0" + seconds_change + "s ";

    document.getElementById("discount-in").innerHTML = "Discount applied in: ";
    document.getElementById("mins").innerHTML = minutes >= 10 ? minutes + "m " : "0" + minutes + "m ";
    document.getElementById("secs").innerHTML = seconds >= 10 ? seconds + "s " : "0" + seconds + "s ";

    // Display the message when countdown is over
    if (timeleft_change <= 0) {
      document.getElementById("order-locked-in").innerHTML =  "Order Locked in!";
      document.getElementById("mins_change").innerHTML = "";
      document.getElementById("secs_change").innerHTML = "";

      
      // hide the buttons
      disableOrderEdit();
      
      // remove the meter
      const cd = document.getElementById("order-fixed-cd");
      if (cd !== null) {
        cd.remove();
      }
    }
  
    if (timeleft <= 0) {
      document.getElementById("discount-in").innerHTML = "20% Discount Applied!!!"; 
      document.getElementById("mins").innerHTML = "";
      document.getElementById("secs").innerHTML = "";
      discount(order.orderId)
      
      // remove the meter
      document.getElementById("discount-cd").remove();
      clearInterval(myfunc);
    }
    
  }, 1000);

  // update the total price to a new price after discount
  function discount(orderId){
    const order = {{{json order}}};

    let cartTotalField = document.querySelector(".cart-total");
    let sum = 0;
    for (const row of tableContents) {
        sum += parseFloat(row["Price"].substring(1));
  }
  //update a new price
  sum = (sum*(1 - DISCOUNT_RATE));
  cartTotalField.textContent = `$${sum.toFixed(2)} `;
  order.discountApplied=true;

  order.items = order.items.map((item) => (
    {
      _id: item._id,
      snackId: item.snack,
      quantity: item.quantity
    }
  ));

  fetch(`/customer/orders/${orderId}`, {
    method: "PUT",
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(order)
  }).then(function(response){
  }).catch(function(error){
  });
}

</script>
