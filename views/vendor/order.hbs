<section id="order">
  <div class="order-wrapper">
    <div class="order-header">
      <h1>
        <div>
          <i class="icon-SnackVan"></i>
        </div>
        Order Details
      </h1>
      <h3>
        Status: {{order.status}}
        {{#if (statusEqualTo order.status 'completed')}}
        <i class="fas fa-circle" id="blue-dot"></i>
        {{else if (statusEqualTo order.status 'fulfilled')}}
        <i class="fas fa-circle" id="green-dot"></i>
        {{else if (statusEqualTo order.status 'preparing')}}
        <i class="fas fa-circle" id="orange-dot"></i>
        {{/if}}
      </h3>
    </div>
    <div>
      <div class="progress-bars">
        <div class="order-timer">
          <span id="mins_change"></span>
          <span id="secs_change"></span>
          <meter id="order-fixed-cd" min="0" max="100" low="33" high="66" value="0"></meter>
          <span id="end_change"></span>
        </div>
        <div class="discount-timer">
          <span id="mins"></span>
          <span id="secs"></span>
          <meter id="discount-cd" min="0" max="100" low="33" high="66" value="0"></meter>
          <span id="end"></span>
        </div>
      </div>
      <div>
        <i id="van-name" class="fas fa-shuttle-van"></i>
        <span class="cart-van-name">Van name</span>
      </div>
      <div>
        <i id="van-location" class="fas fa-map-marker-alt"></i>
        <span class="cart-van-location">Van location</span>
      </div>
    </div>
    {{> cart-table order=order}}
    {{#if (statusEqualTo order.status 'preparing')}}
    <div id="order-buttons" class="order-buttons">
      <button id="cancel-order-button" class="button" onclick="cancelOrder('{{order.orderId}}')">
        <i class="fas fa-trash-alt"></i>
        Cancel Order
      </button>
      <button id="update-order-button" class="button" onclick="updateOrder('{{order.orderId}}')">
        <i class="fas fa-edit"></i>
        Update Order
      </button>
      <button id="add-item-button" class="button" onclick="goToMenu('{{order.orderId}}')" type="button">
        <i class="fas fa-clipboard=list"></i> Add items from menu
      </button>
    </div>
    {{/if}}
  </div>
</section>

<script>

  // redirect to menu to add items to this current order
  function goToMenu(orderId) {
    window.location = `/customer/menu?orderId=${orderId}`;
  }

  const vendor = JSON.parse(sessionStorage.getItem('vendor'));
  if (vendor) {
    document.querySelector('.cart-van-name').textContent = vendor.vendorName;
    document.querySelector('.cart-van-location').textContent = vendor.address;
  }

  // update the table view based on the current cart items, and modifies the
  // order in the database
  async function updateOrder(orderId) {
    window.location.reload();
    const cart = JSON.parse(sessionStorage.getItem("cart"));
    const order = {{{ json order }}}
    order.items = cart;
    fetch(`/customer/orders/${orderId}`, {
      method: "PUT",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(order)
    });
  }

  // sets the status of the order in the database as "cancelled", they will
  // not be displayed on the orders page
  async function cancelOrder(orderId) {
    const order = {{{ json order }}}
    order.items = {{{ json (orderToCart order) }}};
    order.status = "cancelled";
    fetch(`/customer/orders/${orderId}`, {
      method: "PUT",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(order)
    }).then(() => window.location.href = `/customer/orders`);
  }

  

</script>

<script>
  /* TODO [Jimmy]: Before proceeding to change order, maybe need to refetch the order so it is not 
    edited by the vendor between when the order page is rendered and when the edit button is clicked ??
    - Jimmy
  */
  const order = {{{ json order }}}


  function renderTrashButtons(order) {
    if (order.status === "preparing") {
      const trashButtons = document.getElementsByClassName("trash-button");
      for (let i=0; i<trashButtons.length; i++) {
        trashButtons[i].style.display = "inline-block";
        trashButtons[i].style.visibility = "visible";
      }
    }
  }

  function renderOrderEditButtons(order){
    if (order.status === "preparing") {
      const buttonsWrapper = document.getElementById("order-buttons");
      buttonsWrapper.style.display = "block";
      buttonsWrapper.style.visibility = "visible";  
    }
  }

  function enableCountInput(order) {
    if (order.status === "preparing") {
      const countInputs = document.getElementsByClassName("count-input");
      for (let i=0; i<countInputs.length; i++) {
        countInputs[i].enabled = true;
      }
    }
  }

  function disableOrderEdit() {
    const trashButtons = document.getElementsByClassName("trash-button");
    const buttonsWrapper = document.getElementById("order-buttons");
    const countInputs = document.getElementsByClassName("count-input");

    buttonsWrapper.style.display = "none";
    buttonsWrapper.style.visibility = "hidden";  

    for (let i=0; i<trashButtons.length; i++) {
        trashButtons[i].style.display = "none";
        trashButtons[i].style.visibility = "hidden";
    }
    for (let i=0; i<countInputs.length; i++) {
        countInputs[i].enabled = false;
    }
  }

  function addMinutes(date, minutes) {
    var discount_time = (date + minutes * 60000);
    return discount_time;
  }

  // Progress bar for the timer
  var discount_pb = document.getElementById("discount-cd");
  var order_fixed_pb = document.getElementById("order-fixed-cd");
  var discount_timer = 0;
  var reorder_timer = 0;
  var initial_discount_timer = 0;
  var time_order = new Date(order.timeOrdered).getTime();

  if (discount_timer == 0) {
    discount_timer = addMinutes(new Date(order.timeOrdered).getTime(), 15);
    //This should work? but it should pull from time-ordered not the current itme

    //var discount_timer = now + (15*60000);
    //Convert 15 minutes to milliseconds
  }
  if (reorder_timer == 0){
    reorder_timer = addMinutes(new Date(order.timeOrdered).getTime(), 10);
  }

  if (initial_discount_timer == 0){
    initial_discount_timer = discount_timer;
  }

  
  var buttonsUpdated = false

  // Run myfunc every second
  var myfunc = setInterval(function () {

    var now = new Date().getTime();
    var timeleft = discount_timer - now;
    var timeleft_change = reorder_timer - now;

    if (!buttonsUpdated && timeleft_change > 0) {
      // Render the buttons
      renderTrashButtons(order);
      renderOrderEditButtons(order);
      enableCountInput(order);
      buttonsUpdated = !buttonsUpdated;
    }

    // Update progress bar
    order_fixed_pb.setAttribute("value", 100 - 100*(1- timeleft_change/(10*60000)));
    discount_pb.setAttribute("value", 100 - 100*(1- timeleft/(15*60000)));

    
    // Calculating the days, hours, minutes and seconds left
    var minutes = Math.floor((timeleft % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((timeleft % (1000 * 60)) / 1000);

    var minutes_change = Math.floor((timeleft_change % (1000 * 60 * 60)) / (1000 * 60));
    var seconds_change = Math.floor((timeleft_change % (1000 * 60)) / 1000);

    // Result is output to the specific element
    document.getElementById("mins_change").innerHTML = "Order lock in: " + minutes_change + "m "
    document.getElementById("secs_change").innerHTML = seconds_change + "s "

    document.getElementById("mins").innerHTML = "Discount apply in: " + minutes + "m "
    document.getElementById("secs").innerHTML = seconds + "s "

    // Display the message when countdown is over
    if (timeleft_change <= 0) {
      document.getElementById("mins_change").innerHTML = ""
      document.getElementById("secs_change").innerHTML = ""
      document.getElementById("end_change").innerHTML = "Order Locked in!";
      // hide the buttons
      disableOrderEdit();
      
      // remove the meter
      document.getElementById("order-fixed-cd").remove();
    }

  
    if (timeleft <= 0) {
      document.getElementById("mins").innerHTML = ""
      document.getElementById("secs").innerHTML = ""
      document.getElementById("end").innerHTML = "20% Discount Applied!!";
      
      // remove the meter
      document.getElementById("discount-cd").remove();
      clearInterval(myfunc);
    }
  }, 1000);


</script>


